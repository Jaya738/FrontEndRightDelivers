{"version":3,"sources":["Store/actions/cart.js","Store/actions/config.js","Store/actions/product.js","Store/actions/restaurant.js","Store/actions/address.js","Store/actions/orders.js","Store/actions/notifications.js","App.js","serviceWorker.js","index.js","config.js","api.js","Store/actions/actionTypes.js","Store/reducers/configReducer.js","Store/reducers/cartReducer.js","Store/reducers/productReducer.js","Store/reducers/restaurantReducer.js","Store/reducers/addressReducer.js","Store/reducers/ordersReducer.js","Store/reducers/notificationsReducer.js","Store/configStore.js","Store/localStorage.js"],"names":["addToCart","payload","type","actionTypes","setQuantity","clearAndAdd","clearCart","setCheckoutData","deleteCartItem","pid","getDerivedPrice","setLocation","setNotification","setCurService","setBackUrl","updateConfigData","updateSettings","clearNotification","authenticate","logout","loadData","dispatch","axios","get","then","data","setData","setCurProduct","updateRestaurants","setCurRestaurant","setLoadedRestaurants","setReloadRestaurants","addNewAddress","setCurAddress","clearAddress","setAddressList","setActiveOrders","setOrderStatus","addNewOrder","clearOrders","setLoadedNotifications","SignUp","React","lazy","Home","ProductList","More","Dashboard","Checkout","RListNew","Settings","Notifications","AddAddressFromMap","ConfigureAddress","Rating","connect","state","config","actionCreators","props","useState","disconnected","setDisconnected","useEffect","console","log","navigator","onLine","loadConfigData","apiUrl","baseUrl","a","options","method","headers","rKey","authData","dKey","ftoken","localStorage","getItem","fetchWithTimeout","json","res","address","usrid","user","length","userid","isAuth","subscribeToSockets","className","style","overflowX","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","Store","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message","isProd","host","streamUrl","imgUrl","GoogleMapsAPI","socket","openSocket","transports","userID","on","emit","ordersData","unsubscribeToSockets","uri","time","controller","AbortController","signal","setTimeout","abort","fetch","response","ok","Error","status","statusText","name","SET_LOCATION","SET_NOTIFICATION","CLEAR_NOTIFICATION","AUTHENTICATE","LOGOUT","UPDATE_CONFIG_DATA","SET_BACK_URL","UPDATE_SETTINGS","SET_CUR_SERVICE","SET_QUANTITY","ADD_TO_CART","DELETE_CART_ITEM","SET_CHECKOUT_DATA","CLEAR_AND_ADD","CLEAR_CART","LOAD_DATA","UPDATE_PRODUCTS","SET_CUR_PRODUCT","SET_CUR_RESTAURANT","UPDATE_RESTAURANTS","SET_LOADED_RESTAURANTS","SET_RELOAD_RESTAURANTS","SET_CUR_ADDRESS","CLEAR_ADDRESS","SET_DEFAULT_ADDRESS","ADD_NEW_ADDRESS","SET_ADDRESS_LIST","ADD_NEW_ORDER","CLEAR_ORDERS","SET_ALL_ORDERS","SET_ORDER_STATUS","SET_ACTIVE_ORDERS","SET_LOADED_NOTIFICATIONS","SET_RELOAD_NOTIFICATIONS","configReducer","curLocation","mbl","phone","backUrl","loadedData","curBranch","bid","services","curService","pic","notification","showNotification","rcats","branches","action","clear","selectedBranch","find","x","auth","cartReducer","cartItems","checkoutData","totalPrice","subTotal","deliveryCharge","savings","existingCartItem","item","quantity","emptyCrt","push","newCartItems","filter","amountA","amountS","map","parseInt","itemPrice","extraPrice","sprice","delivery","added_item","existed_item","productReducer","curProduct","items","restaurantReducer","curRestaurant","refreshRestaurants","shops","addressReducer","curAddress","defaultAddress","addressList","allowedStatus","ordersReducer","activeOrders","allOrders","orderStatus","statuses","includes","ost","elementsIndex","findIndex","element","ordid","id","newActiveOrders","notificationsReducer","notificationsList","refreshNotifications","persistedState","serializedState","JSON","parse","err","loadState","rootReducer","combineReducers","cart","product","restaurant","orders","notifications","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","_","throttle","stringify","setItem","saveState","getState"],"mappings":"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","file":"static/js/main.bdab0f40.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const addToCart = (payload) => {\r\n  return {\r\n    type: actionTypes.ADD_TO_CART,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setQuantity = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_QUANTITY,\r\n    payload: payload,\r\n  };\r\n};\r\nexport const clearAndAdd = (payload) => {\r\n  return {\r\n    type: actionTypes.CLEAR_AND_ADD,\r\n    payload: payload,\r\n  };\r\n};\r\nexport const clearCart = () => {\r\n  return {\r\n    type: actionTypes.CLEAR_CART,\r\n  };\r\n};\r\nexport const setCheckoutData = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_CHECKOUT_DATA,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const deleteCartItem = (pid) => {\r\n  return {\r\n    type: actionTypes.DELETE_CART_ITEM,\r\n    payload: pid,\r\n  };\r\n};\r\n\r\nexport const getDerivedPrice = (pid) => {\r\n  return {\r\n    type: actionTypes,\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const setLocation = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_LOCATION,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setNotification = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_NOTIFICATION,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setCurService = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_CUR_SERVICE,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setBackUrl = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_BACK_URL,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const updateConfigData = (payload) => {\r\n  return {\r\n    type: actionTypes.UPDATE_CONFIG_DATA,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const updateSettings = (payload) => {\r\n  return {\r\n    type: actionTypes.UPDATE_SETTINGS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const clearNotification = (payload) => {\r\n  return {\r\n    type: actionTypes.CLEAR_NOTIFICATION,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const authenticate = (payload) => {\r\n  return {\r\n    type: actionTypes.AUTHENTICATE,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return {\r\n    type: actionTypes.LOGOUT,\r\n  };\r\n};\r\n\r\nexport function loadData() {\r\n  return function (dispatch) {\r\n    return axios.get(\"http://localhost:8000/\").then(({ data }) => {\r\n      dispatch(setData(data));\r\n    });\r\n  };\r\n}\r\nexport const setData = (data) => {\r\n  return {\r\n    type: actionTypes.LOAD_DATA,\r\n    payload: data,\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const updateProducts = (payload) => {\r\n  return {\r\n    type: actionTypes.UPDATE_PRODUCTS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setCurProduct = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_CUR_PRODUCT,\r\n    payload: payload,\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const updateRestaurants = (payload) => {\r\n  return {\r\n    type: actionTypes.UPDATE_RESTAURANTS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setCurRestaurant = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_CUR_RESTAURANT,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setLoadedRestaurants = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_LOADED_RESTAURANTS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setReloadRestaurants = () => {\r\n  return {\r\n    type: actionTypes.SET_RELOAD_RESTAURANTS,\r\n  };\r\n};","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const addNewAddress = (payload) => {\r\n  return {\r\n    type: actionTypes.ADD_NEW_ADDRESS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setCurAddress = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_CUR_ADDRESS,\r\n    payload: payload,\r\n  };\r\n};\r\nexport const clearAddress = () => {\r\n  return {\r\n    type: actionTypes.CLEAR_ADDRESS\r\n  };\r\n};\r\nexport const setDefaultAddress = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_DEFAULT_ADDRESS,\r\n    payload: payload,\r\n  };\r\n};\r\nexport const setAddressList = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_ADDRESS_LIST,\r\n    payload: payload,\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setActiveOrders = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_ACTIVE_ORDERS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setAllOrders = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_ALL_ORDERS,\r\n    payload: payload,\r\n  };\r\n};\r\nexport const setOrderStatus = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_ORDER_STATUS,\r\n    payload: payload,\r\n  };\r\n};\r\nexport const addNewOrder = (payload) => {\r\n  return {\r\n    type: actionTypes.ADD_NEW_ORDER,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const clearOrders = () => {\r\n  return {\r\n    type: actionTypes.CLEAR_ORDERS,\r\n  };\r\n};","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setLoadedNotifications = (payload) => {\r\n  return {\r\n    type: actionTypes.SET_LOADED_NOTIFICATIONS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const setReloadNotifications = () => {\r\n  return {\r\n    type: actionTypes.SET_RELOAD_NOTIFICATIONS,\r\n  };\r\n};","import React, { useState, useEffect, Suspense, lazy } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { subscribeToSockets, fetchWithTimeout } from \"./api\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport * as actionCreators from \"./Store/actions/index\";\r\nimport { baseUrl } from \"./config\";\r\n\r\n//lazy routes\r\nconst SignUp = React.lazy(() => import('./Containers/SignUp'));\r\nconst Home = React.lazy(() => import('./Containers/Home'));\r\nconst ProductList = React.lazy(() => import('./Components/Products/ProductList'));\r\nconst More = React.lazy(() => import('./Components/More/Morev2'));\r\nconst Dashboard = React.lazy(() => import('./Containers/Dashboard'));\r\nconst Checkout = React.lazy(() => import('./Components/Checkout/Checkout'));\r\nconst RListNew = React.lazy(() => import('./Components/Restaurants/RListNew'));\r\nconst Settings = React.lazy(() => import('./Components/Settings/Settings'));\r\nconst Notifications = React.lazy(() => import('./Components/Notifications/Notifications'));\r\nconst AddAddressFromMap = React.lazy(() => import('./Components/Maps/AddAddressFromMap'));\r\nconst ConfigureAddress = React.lazy(() => import('./Components/Dashboard/Address'));\r\nconst Rating = React.lazy(() => import('./Components/Common/Rating'));\r\n\r\nfunction App(props) {\r\n  const [disconnected, setDisconnected] = useState(false);\r\n  const reload = () => {\r\n    if (navigator.onLine) {\r\n      loadConfigData();\r\n    } else {\r\n      setDisconnected(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(navigator.onLine);\r\n    reload();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const apiUrl = baseUrl + \"configs\";\r\n  const loadConfigData = async () => {\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\",\r\n        rKey: props.config.authData.rKey || \"\",\r\n        dKey: props.config.authData.dKey || \"\",\r\n        ftoken: localStorage.getItem(\"ftoken\") || \"\",\r\n      },\r\n    };\r\n\r\n    const res = await (await fetchWithTimeout(apiUrl, options, 3000)).json();\r\n    if (res) {\r\n      props.updateConfigData(res);\r\n      props.setActiveOrders(res);\r\n      props.setAddressList(res.address);\r\n      const usrid = res.user && res.user.length > 0 ? res.user[0].userid : \"\";\r\n      if (props.config.isAuth) {\r\n        subscribeToSockets(usrid);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {!disconnected && (\r\n        <div className=\"\" style={{ overflowX: \"hidden\" }}>\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Switch>\r\n              <Route exact path=\"/login\" component={SignUp} />\r\n              {/* <Route exact path=\"/welcome\" component={Welcome} /> */}\r\n              <Route exact path=\"/notifications\" component={Notifications} />\r\n              <Route exact path=\"/addaddress\" component={AddAddressFromMap} />\r\n              <Route\r\n                exact\r\n                path=\"/configure-address\"\r\n                component={ConfigureAddress}\r\n              />\r\n              <Route exact path=\"/settings\" component={Settings} />\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/register\" component={SignUp} />\r\n              <Route exact path=\"/more\" component={More} />\r\n              <Route exact path=\"/rating\" component={Rating} />\r\n              <Route path=\"/dashboard\" component={Dashboard} />\r\n              <Route path=\"/checkout\" component={Checkout} />\r\n              <Route exact path=\"/:location\" component={Home} />\r\n              <Route exact path=\"/:location/:service\" component={RListNew} />\r\n              <Route\r\n                exact\r\n                path=\"/:location/:service/:restaurant\"\r\n                component={ProductList}\r\n              />\r\n            </Switch>\r\n          </Suspense>\r\n           </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    config: state.config,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateConfigData: (payload) =>\r\n      dispatch(actionCreators.updateConfigData(payload)),\r\n    setActiveOrders: (payload) =>\r\n      dispatch(actionCreators.setActiveOrders(payload)),\r\n    setAddressList: (payload) =>\r\n      dispatch(actionCreators.setAddressList(payload)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Store from \"./Store/configStore\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={Store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const isProd = window.location.host === \"m.rightdelivers.in\" ? true : false;\r\nconst prodUrl = \"https://api.rightdelivers.in/user/api/v1/\";\r\nconst devUrl = \"https://testapi.rightdelivers.in/user/api/v1/\";\r\nconst devStream = \"https://teststream.rightdelivers.in\";\r\nconst prodStream = \"https://stream.rightdelivers.in\";\r\n\r\nexport const streamUrl = isProd ? prodStream : devStream;\r\nexport const baseUrl = isProd ? prodUrl : devUrl;\r\nexport const imgUrl = \"https://rightdelivers.in/uploads/\";\r\nexport const GoogleMapsAPI = \"AIzaSyCDKBu1aPoiFQX0tCZUJJ2I8_JRW7f_vmU\";\r\n","import openSocket from \"socket.io-client\";\r\nimport * as actionCreators from \"./Store/actions/index\";\r\nimport Store from \"./Store/configStore\";\r\nimport {streamUrl} from \"./config\"\r\n\r\nconst socket = openSocket(streamUrl, {\r\n  path: \"/socket.io\",\r\n  transports: [\"websocket\"],\r\n});\r\n\r\n\r\nfunction subscribeToSockets(userID) {\r\n  console.log(\"subscribed\")\r\n  //const state = Store.getState();\r\n  socket.connect();\r\n  \r\n  //Establish connection\r\n  socket.on(\"connect\");\r\n\r\n  //Subscribe to sockets with token\r\n  socket.emit(\"subscribe\",userID);\r\n  //Get Messages from sockets\r\n  socket.on(\"message\", (message) => {\r\n  });\r\n\r\n  //Get Order Status from sockets\r\n  socket.on(\"orderstatus\",(ordersData) => {\r\n    console.log(\"received\")\r\n    Store.dispatch(actionCreators.setOrderStatus(ordersData));\r\n  });\r\n\r\n  socket.on(\"refreshRestaurants\",()=>{\r\n    Store.dispatch(actionCreators.setReloadRestaurants());\r\n  })\r\n  //Get Toast Messages\r\n  socket.on(\"toast\", function (message) {\r\n    return\r\n  });\r\n}\r\n\r\nfunction unsubscribeToSockets(userID){\r\n  console.log(\"Unsubscribed\")\r\n  socket.emit(\"unsubscribe\",userID)\r\n}\r\n\r\n//fetch api with timeout\r\n\r\nconst fetchWithTimeout = (uri, options = {}, time = 5000) => {\r\n  // Lets set up our `AbortController`, and create a request options object\r\n  // that includes the controller's `signal` to pass to `fetch`.\r\n  const controller = new AbortController()\r\n  const config = { ...options, signal: controller.signal }\r\n  // Set a timeout limit for the request using `setTimeout`. If the body\r\n  // of this timeout is reached before the request is completed, it will\r\n  // be cancelled.\r\n  const timeout = setTimeout(() => {\r\n    controller.abort()\r\n  }, time)\r\n  return fetch(uri, config)\r\n    .then((response) => {\r\n      // Because _any_ response is considered a success to `fetch`, we\r\n      // need to manually check that the response is in the 200 range.\r\n      // This is typically how I handle that.\r\n      if (!response.ok) {\r\n        throw new Error(`${response.status}: ${response.statusText}`)\r\n      }\r\n      return response\r\n    })\r\n    .catch((error) => {\r\n      // When we abort our `fetch`, the controller conveniently throws\r\n      // a named error, allowing us to handle them separately from\r\n      // other errors.\r\n      if (error.name === 'AbortError') {\r\n        throw new Error('Response timed out')\r\n      }\r\n      throw new Error(error.message)\r\n    })\r\n}\r\nexport { subscribeToSockets, unsubscribeToSockets, fetchWithTimeout };\r\n","//config\r\nexport const SET_LOCATION = \"SET_LOCATION\";\r\nexport const SET_NOTIFICATION = \"SET_NOTIFICATION\";\r\nexport const CLEAR_NOTIFICATION = \"CLEAR_NOTIFICATION\";\r\nexport const AUTHENTICATE = \"AUTHENTICATE\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const UPDATE_CONFIG_DATA = \"UPDATE_CONFIG_DATA\";\r\nexport const SET_BACK_URL = \"SET_BACK_URL\";\r\nexport const UPDATE_SETTINGS = \"UPDATE_SETTINGS\";\r\nexport const SET_CUR_SERVICE = \"SET_CUR_SERVICE\";\r\n\r\n//cart\r\nexport const SET_QUANTITY = \"SET_QUANTITY\";\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const DELETE_CART_ITEM = \"DELETE_CART_ITEM\";\r\nexport const SET_CHECKOUT_DATA = \"SET_CHECKOUT_DATA\";\r\nexport const CLEAR_AND_ADD = \"CLEAR_AND_ADD\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\n\r\n//test\r\nexport const LOAD_DATA = \"LOAD_DATA\";\r\n\r\n//product\r\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const SET_CUR_PRODUCT = \"SET_CUR_PRODUCT\";\r\n\r\n//restaurant\r\nexport const SET_CUR_RESTAURANT = \"SET_CUR_RESTAURANT\";\r\nexport const UPDATE_RESTAURANTS = \"UPDATE_RESTAURANTS\";\r\nexport const SET_LOADED_RESTAURANTS = \"SET_LOADED_RESTAURANTS\";\r\nexport const SET_RELOAD_RESTAURANTS = \"SET_RELOAD_RESTAURANTS\";\r\n\r\n//address\r\nexport const SET_CUR_ADDRESS = \"SET_CUR_ADDRESS\";\r\nexport const CLEAR_ADDRESS = \"CLEAR_ADDRESS\";\r\nexport const SET_DEFAULT_ADDRESS = \"SET_DEFAULT_ADDRESS\";\r\nexport const ADD_NEW_ADDRESS = \"ADD_NEW_ADDRESS\";\r\nexport const SET_ADDRESS_LIST = \"SET_ADDRESS_LIST\";\r\n\r\n//orders\r\nexport const ADD_NEW_ORDER = \"ADD_NEW_ORDER\";\r\nexport const CLEAR_ORDERS = \"CLEAR_ORDERS\";\r\nexport const SET_ALL_ORDERS = \"SET_ALL_ORDERS\";\r\nexport const SET_ORDER_STATUS = \"SET_ORDER_STATUS\";\r\nexport const SET_ACTIVE_ORDERS = \"SET_ACTIVE_ORDERS\";\r\n\r\n//notifications\r\nexport const SET_LOADED_NOTIFICATIONS = \"SET_LOADED_NOTIFICATIONS\";\r\nexport const SET_RELOAD_NOTIFICATIONS = \"SET_RELOAD_NOTIFICATIONS\";\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { baseUrl } from \"../../config\";\r\nimport { unsubscribeToSockets } from \"../../api\";\r\n\r\nconst configReducer = function (\r\n  state = {\r\n    curLocation: \"\",\r\n    isAuth: false,\r\n    authData: {\r\n      user: { name: \"\", mbl: \"\", userid: 0 },\r\n      phone: \"\",\r\n      rKey: \"\",\r\n      dKey: \"\",\r\n    },\r\n    backUrl: \"/\",\r\n    baseUrl: baseUrl,\r\n    loadedData: {},\r\n    curBranch: { bid: \"\", services: [] },\r\n    curService: { name: \"\", pic: \"\" },\r\n    notification: \"\",\r\n    showNotification: false,\r\n    rcats: [],\r\n    services: {},\r\n    branches: [],\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        loadedData: action.payload,\r\n      };\r\n    case actionTypes.AUTHENTICATE:\r\n      return {\r\n        ...state,\r\n        isAuth: true,\r\n        authData: action.payload,\r\n      };\r\n    case actionTypes.LOGOUT:\r\n      unsubscribeToSockets(state.authData.user.userid);\r\n      localStorage.clear();\r\n      return {\r\n        ...state,\r\n        isAuth: false,\r\n        authData: {},\r\n        curLocation: \"\",\r\n        backUrl: \"/\",\r\n      };\r\n    case actionTypes.SET_BACK_URL:\r\n      return {\r\n        ...state,\r\n        backUrl: action.payload,\r\n      };\r\n    case actionTypes.UPDATE_SETTINGS:\r\n      return {\r\n        ...state,\r\n        authData: {\r\n          ...state.authData,\r\n          user: {\r\n            ...state.authData.user,\r\n            name: action.payload.name,\r\n          },\r\n        },\r\n      };\r\n    case actionTypes.UPDATE_CONFIG_DATA:\r\n      const selectedBranch = action.payload.branches.find(\r\n        (x) => x.bid === (state.curBranch ? state.curBranch.bid : \"\")\r\n      );\r\n      return {\r\n        ...state,\r\n        branches: action.payload.branches,\r\n        rcats: action.payload.rcats,\r\n        services: action.payload.services,\r\n        curBranch: selectedBranch,\r\n        isAuth: action.payload.auth === 1 ? true : false,\r\n        authData: {\r\n          ...state.authData,\r\n          user: action.payload.user\r\n            ? {\r\n                ...state.authData.user,\r\n                ...action.payload.user[0],\r\n              }\r\n            : state.authData.user,\r\n        },\r\n      };\r\n    case actionTypes.SET_LOCATION:\r\n      return {\r\n        ...state,\r\n        curBranch: action.payload,\r\n        showNotification: false,\r\n        notification: \"\",\r\n        curLocation: action.payload.name,\r\n      };\r\n    case actionTypes.SET_CUR_SERVICE:\r\n      return {\r\n        ...state,\r\n        curService: action.payload,\r\n      };\r\n    case actionTypes.SET_NOTIFICATION:\r\n      return { ...state, notification: action.payload, showNotification: true };\r\n\r\n    case actionTypes.CLEAR_NOTIFICATION:\r\n      return { ...state, notification: \"\", showNotification: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default configReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst cartReducer = function (\r\n  state = {\r\n    cartItems: [],\r\n    checkoutData: {\r\n      totalPrice: 0,\r\n      subTotal: 0,\r\n      deliveryCharge: 0,\r\n      savings: 0,\r\n    },\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_QUANTITY: {\r\n      const existingCartItem = state.cartItems.find(\r\n        (item) => item.pid === action.payload.pid\r\n      );\r\n      existingCartItem.quantity = action.payload.quantity;\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case actionTypes.SET_CHECKOUT_DATA: {\r\n      return {\r\n        ...state,\r\n        checkoutData: action.payload,\r\n      };\r\n    }\r\n    case actionTypes.CLEAR_AND_ADD: {\r\n      let emptyCrt = [];\r\n      emptyCrt.push(action.payload);\r\n      return {\r\n        ...state,\r\n        cartItems: emptyCrt,\r\n      };\r\n    }\r\n    case actionTypes.CLEAR_CART: {\r\n      return {\r\n        ...state,\r\n        cartItems: [],\r\n        checkoutData: {\r\n          totalPrice: 0,\r\n          subTotal: 0,\r\n          deliveryCharge: 0,\r\n          savings: 0,\r\n        },\r\n      };\r\n    }\r\n\r\n    case actionTypes.DELETE_CART_ITEM: {\r\n      const newCartItems = state.cartItems.filter(\r\n        (item) => item.pid !== action.payload\r\n      );\r\n      let amountA = 0;\r\n      let amountS = 0;\r\n      newCartItems.map((item) => {\r\n        amountA +=\r\n          (parseInt(item.itemPrice) + parseInt(item.extraPrice)) *\r\n          item.quantity;\r\n        amountS += item.sprice * item.quantity;\r\n        return amountA;\r\n      });\r\n      const payload = {\r\n        ...state.checkoutData,\r\n        subTotal: amountA,\r\n        savings: amountS - amountA,\r\n        totalPrice: amountA + parseInt(state.checkoutData.delivery),\r\n      };\r\n      return {\r\n        ...state,\r\n        cartItems: newCartItems,\r\n        checkoutData: payload,\r\n      };\r\n    }\r\n    case actionTypes.ADD_TO_CART:\r\n      let added_item = state.cartItems.find(\r\n        (item) => item.pid === action.payload.pid\r\n      );\r\n      let existed_item = state.cartItems.find(\r\n        (item) => action.payload.pid === item.pid\r\n      );\r\n      if (existed_item) {\r\n        added_item.quantity += action.payload.quantity;\r\n        return {\r\n          ...state,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          cartItems: [...state.cartItems, action.payload],\r\n        };\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default cartReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst productReducer = function (\r\n  state = {\r\n    curProduct: {},\r\n    items: [],\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload.items,\r\n      };\r\n    case actionTypes.SET_CUR_PRODUCT:\r\n      return {\r\n        ...state,\r\n        curProduct: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default productReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst restaurantReducer = function (\r\n  state = {\r\n    curRestaurant: {},\r\n    items: [],\r\n    refreshRestaurants:true\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.UPDATE_RESTAURANTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload.shops,\r\n      };\r\n    case actionTypes.SET_CUR_RESTAURANT:\r\n      return {\r\n        ...state,\r\n        curRestaurant: action.payload,\r\n      };\r\n    case actionTypes.SET_RELOAD_RESTAURANTS:\r\n      return {\r\n        ...state,\r\n        refreshRestaurants:true\r\n      };\r\n    case actionTypes.SET_LOADED_RESTAURANTS:\r\n      return {\r\n        ...state,\r\n        refreshRestaurants:false,\r\n        items:action.payload.shops\r\n      };     \r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default restaurantReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst addressReducer = function (\r\n  state = {\r\n    curAddress: {},\r\n    defaultAddress: {},\r\n    addressList: [],\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_NEW_ADDRESS:\r\n      return {\r\n        ...state,\r\n        addressList:\r\n          state.addressList.length > 0\r\n            ? [...state.addressList, action.payload]\r\n            : [action.payload],\r\n      };\r\n    case actionTypes.SET_DEFAULT_ADDRESS:\r\n      return {\r\n        ...state,\r\n        defaultAddress: action.payload,\r\n      };\r\n    case actionTypes.SET_ADDRESS_LIST:\r\n      return {\r\n        ...state,\r\n        addressList: action.payload,\r\n      };\r\n\r\n    case actionTypes.SET_CUR_ADDRESS:\r\n      return {\r\n        ...state,\r\n        curAddress: action.payload,\r\n      };\r\n\r\n    case actionTypes.CLEAR_ADDRESS:\r\n      return {\r\n        ...state,\r\n        curAddress: {},\r\n        defaultAddress: {},\r\n        addressList: [],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default addressReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nconst allowedStatus = [2, 3, 4, 5, 77, 99];\r\nconst ordersReducer = function (\r\n  state = {\r\n    activeOrders: [],\r\n    allOrders: [],\r\n    orderStatus: {},\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_ALL_ORDERS: {\r\n      return {\r\n        ...state,\r\n        allOrders: action.payload,\r\n      };\r\n    }\r\n    case actionTypes.ADD_NEW_ORDER: {\r\n      return {\r\n        ...state,\r\n        activeOrders:\r\n          state.activeOrders.length > 0\r\n            ? [...state.activeOrders, action.payload]\r\n            : [action.payload],\r\n      };\r\n    }\r\n    case actionTypes.SET_ACTIVE_ORDERS: {\r\n      if (action.payload.status === 1) {\r\n        return {\r\n          ...state,\r\n          activeOrders: action.payload.activeOrders,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          activeOrders: action.payload.activeOrders,\r\n          orderStatus: action.payload.statuses,\r\n        };\r\n      }\r\n    }\r\n    case actionTypes.CLEAR_ORDERS: {\r\n      return {\r\n        ...state,\r\n        activeOrders: {},\r\n        allOrders: {},\r\n      };\r\n    }\r\n    case actionTypes.SET_ORDER_STATUS: {\r\n      if (allowedStatus.includes(action.payload.ost)) {\r\n        const elementsIndex = state.activeOrders.findIndex(\r\n          (element) => element.ordid === action.payload.id\r\n        );\r\n        let newActiveOrders = [...state.activeOrders];\r\n        newActiveOrders[elementsIndex] = {\r\n          ...newActiveOrders[elementsIndex],\r\n          ost: action.payload.ost,\r\n        };\r\n        return {\r\n          ...state,\r\n          activeOrders: newActiveOrders,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default ordersReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst notificationsReducer = function (\r\n  state = {\r\n    notificationsList: [],\r\n    refreshNotifications:true\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_RELOAD_NOTIFICATIONS:\r\n      return {\r\n        ...state,\r\n        refreshNotifications:true\r\n      };\r\n    case actionTypes.SET_LOADED_NOTIFICATIONS:\r\n      return {\r\n        ...state,\r\n        refreshNotifications:false,\r\n        notificationsList:action.payload\r\n      };     \r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default notificationsReducer;\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport _ from \"lodash\";\r\n\r\nimport configReducer from \"./reducers/configReducer\";\r\nimport cartReducer from \"./reducers/cartReducer\";\r\nimport productReducer from \"./reducers/productReducer\";\r\nimport restaurantReducer from \"./reducers/restaurantReducer\";\r\nimport addressReducer from \"./reducers/addressReducer\";\r\nimport ordersReducer from \"./reducers/ordersReducer\";\r\nimport { loadState, saveState } from \"./localStorage\";\r\nimport notificationsReducer from \"./reducers/notificationsReducer\";\r\n\r\nconst persistedState = loadState();\r\n\r\nconst rootReducer = combineReducers({\r\n  config: configReducer,\r\n  cart: cartReducer,\r\n  product: productReducer,\r\n  restaurant: restaurantReducer,\r\n  address: addressReducer,\r\n  orders: ordersReducer,\r\n  notifications: notificationsReducer,\r\n});\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nStore.subscribe(\r\n  _.throttle(() => {\r\n    saveState({\r\n      cart: Store.getState().cart,\r\n      config: Store.getState().config,\r\n      address: Store.getState().address,\r\n      product: Store.getState().product,\r\n      orders: Store.getState().orders,\r\n      restaurant: Store.getState().restaurant,\r\n    });\r\n  }, 1000)\r\n);\r\n\r\nexport default Store;\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch (err) {\r\n    // die\r\n  }\r\n};\r\n"],"sourceRoot":""}