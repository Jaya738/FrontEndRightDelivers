{"version":3,"sources":["Components/Common/MblNavbar.js","Components/Maps/Map.js","Components/Maps/AddAddressFromMap.js"],"names":["connect","state","config","cartCount","cart","cartItems","length","withRouter","props","className","style","position","padding","top","width","backgroundColor","zIndex","paddingTop","display","alignItems","onClick","back","fontSize","color","aria-hidden","heading","to","Geocode","setApiKey","GoogleMapsAPI","enableDebug","Map","handleLocationError","err","console","warn","code","message","setError","setShowToast","getLiveLocation","navigator","geolocation","getCurrentPosition","setLiveLocation","enableHighAccuracy","timeout","maximumAge","coords","log","fromLatLng","latitude","longitude","then","response","address","results","formatted_address","addressArray","address_components","city","getCity","area","getArea","getState","setState","showMapFooter","mapPosition","lat","lng","markerPosition","handleAddressFromMap","handleCloseFooter","i","types","long_name","j","onMarkerDragEnd","event","newLat","latLng","newLng","error","onPlaceSelected","place","latValue","geometry","location","lngValue","center","this","nextProps","nextState","AsyncMap","withScriptjs","withGoogleMap","google","defaultZoom","zoom","defaultCenter","name","draggable","onDragEnd","marginTop","height","right","paddingLeft","background","border","outline","borderRadius","placeholder","componentRestrictions","country","paddingRight","handleCloseMap","undefined","googleMapURL","loadingElement","containerElement","margin","mapElement","Component","restaurant","dispatch","addNewAddress","payload","actionCreators","setAddressList","geolocated","positionOptions","userDecisionTimeout","useState","showMap","setShowMap","mapData","curRestaurant","mapPoints","curBranch","points","history","useHistory","showToast","isServicable","setIsServicable","lon","cords","setCords","emptyLoginData","id","authData","user","type","new","phone","flat","street","long","loginData","setLoginData","useEffect","saveAddress","a","apiUrl","baseUrl","data","options","method","headers","rKey","dKey","body","JSON","stringify","fetchWithTimeout","json","res","status","msg","goBack","errorToast","onClose","show","delay","autohide","bottom","textAlign","left","transform","Body","borderBottom","addressForm","onSubmit","e","preventDefault","checked","onChange","htmlFor","fontWeight","justifyContent","marginBottom","value","target","required","push","mapView","overflow","pointsPolygon","map","point","isInPolygon","geolib","calculateService"],"mappings":"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","file":"static/js/18.999da239.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction MblNavbar(props) {\r\n  const cartCount = props.cartCount;\r\n  const navStyle = {\r\n    position: \"fixed\",\r\n    padding: \"0.5rem 1rem\",\r\n    top: \"0\",\r\n    width: \"100%\",\r\n    backgroundColor: \"#2F4F4F\",\r\n    zIndex: \"10\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed-top align-middle\" style={navStyle}>\r\n      <div\r\n        style={{\r\n          paddingTop: \"4vh\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <div\r\n          onClick={props.back}\r\n          style={{\r\n            fontSize: \"20px\",\r\n            color: \"white\",\r\n            padding: \"0px 20px\",\r\n          }}\r\n        >\r\n          <i className=\"fa fa-angle-left\" aria-hidden=\"true\"></i>\r\n        </div>\r\n        <span\r\n          style={{\r\n            fontSize: \"18px\",\r\n            color: \"white\",\r\n          }}\r\n        >\r\n          {props.heading}\r\n        </span>\r\n        <Link to=\"/dashboard/cart\" className=\"option_links ml-auto mr-3\">\r\n          <i className=\"uil uil-shopping-cart-alt icon_wishlist\"></i>\r\n          <span className=\"noti_count1\">{cartCount}</span>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    config: state.config,\r\n    cartCount: state.cart.cartItems.length,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(MblNavbar));\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  withScriptjs,\r\n  Marker,\r\n  // InfoWindow,\r\n} from \"react-google-maps\";\r\nimport \"./maps.css\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport { GoogleMapsAPI } from \"../../config\";\r\nGeocode.setApiKey(GoogleMapsAPI);\r\nGeocode.enableDebug();\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address: \"\",\r\n      showMapFooter: true,\r\n      city: \"\",\r\n      area: \"\",\r\n      state: \"\",\r\n      mapPosition: {\r\n        lat: this.props.center.lat,\r\n        lng: this.props.center.lng,\r\n      },\r\n      markerPosition: {\r\n        lat: this.props.center.lat,\r\n        lng: this.props.center.lng,\r\n      },\r\n    };\r\n  }\r\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\r\n  componentDidMount() {\r\n    this.getLiveLocation();\r\n    Geocode.fromLatLng(\r\n      this.state.mapPosition.lat,\r\n      this.state.mapPosition.lng\r\n    ).then(\r\n      (response) => {\r\n        const address = response.results[0].formatted_address,\r\n          addressArray = response.results[0].address_components,\r\n          city = this.getCity(addressArray),\r\n          area = this.getArea(addressArray),\r\n          state = this.getState(addressArray);\r\n        this.setState({\r\n          ...this.state,\r\n          showMapFooter: true,\r\n          address: address ? address : \"\",\r\n          area: area ? area : \"\",\r\n          city: city ? city : \"\",\r\n          state: state ? state : \"\",\r\n        });\r\n        this.props.handleAddressFromMap(this.state);\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n  handleLocationError = (err) => {\r\n    console.warn(`ERROR(${err.code}): ${err.message}`);\r\n    this.props.setError(\r\n      \"Please Allow location access. ( Unblock if not prompted to allow)\"\r\n    );\r\n    this.props.setShowToast(true);\r\n  };\r\n\r\n  getLiveLocation = () => {\r\n    const options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 5000,\r\n      maximumAge: 10000,\r\n    };\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        this.setLiveLocation,\r\n        this.handleLocationError,\r\n        options\r\n      );\r\n    } else {\r\n      this.props.setError(\"Location Service is not supported by your device.\");\r\n      this.props.setShowToast(true);\r\n    }\r\n  };\r\n\r\n  setLiveLocation = ({ coords }) => {\r\n    console.log(coords);\r\n    Geocode.fromLatLng(coords.latitude, coords.longitude).then((response) => {\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = this.getCity(addressArray),\r\n        area = this.getArea(addressArray),\r\n        state = this.getState(addressArray);\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        showMapFooter: true,\r\n        address: address ? address : \"\",\r\n        area: area ? area : \"\",\r\n        city: city ? city : \"\",\r\n        state: state ? state : \"\",\r\n        mapPosition: {\r\n          lat: coords.latitude,\r\n          lng: coords.longitude,\r\n        },\r\n        markerPosition: {\r\n          lat: coords.latitude,\r\n          lng: coords.longitude,\r\n        },\r\n      });\r\n      this.props.handleAddressFromMap(this.state);\r\n    });\r\n  };\r\n\r\n  handleCloseFooter = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      showMapFooter: false,\r\n    });\r\n  };\r\n  /**\r\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n   *\r\n   * @param nextProps\r\n   * @param nextState\r\n   * @return {boolean}\r\n   */\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (\r\n      this.state.markerPosition.lat !== this.props.center.lat ||\r\n      this.state.address !== nextState.address ||\r\n      this.state.city !== nextState.city ||\r\n      this.state.area !== nextState.area ||\r\n      this.state.state !== nextState.state\r\n    ) {\r\n      return true;\r\n    } else if (this.props.center.lat === nextProps.center.lat) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getCity = (addressArray) => {\r\n    let city = \"\";\r\n    for (let i = 0; i < addressArray.length; i++) {\r\n      if (\r\n        addressArray[i].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[i].types[0]\r\n      ) {\r\n        city = addressArray[i].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n\r\n  getArea = (addressArray) => {\r\n    let area = \"\";\r\n    for (let i = 0; i < addressArray.length; i++) {\r\n      if (addressArray[i].types[0]) {\r\n        for (let j = 0; j < addressArray[i].types.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[i].types[j] ||\r\n            \"locality\" === addressArray[i].types[j]\r\n          ) {\r\n            area = addressArray[i].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  getState = (addressArray) => {\r\n    let state = \"\";\r\n    for (let i = 0; i < addressArray.length; i++) {\r\n      for (let i = 0; i < addressArray.length; i++) {\r\n        if (\r\n          addressArray[i].types[0] &&\r\n          \"administrative_area_level_1\" === addressArray[i].types[0]\r\n        ) {\r\n          state = addressArray[i].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * And function for city,state and address input\r\n   * @param event\r\n   */\r\n  // onChange = (event) => {\r\n  //   this.setState({ [event.target.name]: event.target.value });\r\n  // };\r\n  /**\r\n   * This Event triggers when the marker window is closed\r\n   *\r\n   * @param event\r\n   */\r\n  // onInfoWindowClose = (event) => {};\r\n\r\n  /**\r\n   * When the marker is dragged you get the lat and long using the functions available from event object.\r\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n   * And then set those values in the state.\r\n   *\r\n   * @param event\r\n   */\r\n  onMarkerDragEnd = (event) => {\r\n    let newLat = event.latLng.lat(),\r\n      newLng = event.latLng.lng();\r\n\r\n    Geocode.fromLatLng(newLat, newLng).then(\r\n      (response) => {\r\n        const address = response.results[0].formatted_address,\r\n          addressArray = response.results[0].address_components,\r\n          city = this.getCity(addressArray),\r\n          area = this.getArea(addressArray),\r\n          state = this.getState(addressArray);\r\n        this.setState({\r\n          ...this.state,\r\n          showMapFooter: true,\r\n          address: address ? address : \"\",\r\n          area: area ? area : \"\",\r\n          city: city ? city : \"\",\r\n          state: state ? state : \"\",\r\n          markerPosition: {\r\n            lat: newLat,\r\n            lng: newLng,\r\n          },\r\n          mapPosition: {\r\n            lat: newLat,\r\n            lng: newLng,\r\n          },\r\n        });\r\n        this.props.handleAddressFromMap(this.state);\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n   * When the user types an address in the search box\r\n   * @param place\r\n   */\r\n  onPlaceSelected = (place) => {\r\n    const address = place.formatted_address,\r\n      addressArray = place.address_components,\r\n      city = this.getCity(addressArray),\r\n      area = this.getArea(addressArray),\r\n      state = this.getState(addressArray),\r\n      latValue = place.geometry.location.lat(),\r\n      lngValue = place.geometry.location.lng();\r\n    // Set these values in the state.\r\n    this.setState({\r\n      ...this.state,\r\n      showMapFooter: true,\r\n      address: address ? address : \"\",\r\n      area: area ? area : \"\",\r\n      city: city ? city : \"\",\r\n      state: state ? state : \"\",\r\n      markerPosition: {\r\n        lat: latValue,\r\n        lng: lngValue,\r\n      },\r\n      mapPosition: {\r\n        lat: latValue,\r\n        lng: lngValue,\r\n      },\r\n    });\r\n    this.props.handleAddressFromMap(this.state);\r\n  };\r\n\r\n  render() {\r\n    const AsyncMap = withScriptjs(\r\n      withGoogleMap((props) => (\r\n        <GoogleMap\r\n          google={this.props.google}\r\n          defaultZoom={this.props.zoom}\r\n          defaultCenter={{\r\n            lat: this.state.mapPosition.lat,\r\n            lng: this.state.mapPosition.lng,\r\n          }}\r\n        >\r\n          <Marker\r\n            google={this.props.google}\r\n            name={\"Pin\"}\r\n            draggable={true}\r\n            onDragEnd={this.onMarkerDragEnd}\r\n            position={{\r\n              lat: this.state.markerPosition.lat,\r\n              lng: this.state.markerPosition.lng,\r\n            }}\r\n          />\r\n          <Marker />\r\n\r\n          <div className=\"map-overlay d-flex\">\r\n            <i\r\n              style={{ fontSize: \"18px\", marginTop: \"3vh\" }}\r\n              className=\"fa fa-search\"\r\n              aria-hidden=\"true\"\r\n            ></i>\r\n            <Autocomplete\r\n              style={{\r\n                width: \"55%\",\r\n                height: \"6vh\",\r\n                right: \"2%\",\r\n                paddingLeft: \"16px\",\r\n                background: \"none\",\r\n                border: \"0\",\r\n                outline: \"0\",\r\n                color: \"white\",\r\n                borderRadius: \"5px\",\r\n                position: \"relative\",\r\n                marginTop: \"8px\",\r\n                fontSize: \"16px\",\r\n              }}\r\n              onPlaceSelected={this.onPlaceSelected}\r\n              types={[\"(regions)\"]}\r\n              placeholder=\"Search your location\"\r\n              componentRestrictions={{ country: \"in\" }}\r\n            />\r\n            <span\r\n              onClick={this.getLiveLocation}\r\n              style={{\r\n                color: \"white\",\r\n                marginTop: \"2.7vh\",\r\n                paddingRight: \"10px\",\r\n              }}\r\n            >\r\n              Live Location\r\n            </span>\r\n            <i\r\n              className=\"fa fa-map-marked-alt icon__1\"\r\n              style={{ color: \"white\" }}\r\n              onClick={this.getLiveLocation}\r\n              aria-hidden=\"true\"\r\n            ></i>\r\n          </div>\r\n          <div\r\n            className=\"map-overlay-footer\"\r\n            style={{ display: this.state.showMapFooter ? \"block\" : \"none\" }}\r\n          >\r\n            <div className=\"show-address\">{this.state.address}</div>\r\n            <span\r\n              className=\"close-address-display\"\r\n              onClick={this.handleCloseFooter}\r\n            >\r\n              <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n            </span>\r\n\r\n            <span\r\n              className=\"next-address-button\"\r\n              onClick={this.props.handleCloseMap}\r\n            >\r\n              Continue\r\n              <i className=\"fa fa-angle-right ml-2\" aria-hidden=\"true\"></i>\r\n            </span>\r\n          </div>\r\n        </GoogleMap>\r\n      ))\r\n    );\r\n    let map;\r\n    if (this.props.center.lat !== undefined) {\r\n      map = (\r\n        <div>\r\n          <AsyncMap\r\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`}\r\n            loadingElement={<div style={{ height: `100%` }} />}\r\n            containerElement={\r\n              <div style={{ height: \"100vh\", margin: \"0\", padding: \"0\" }} />\r\n            }\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      map = <div style={{ height: this.props.height }} />;\r\n    }\r\n    return map;\r\n  }\r\n}\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { geolocated } from \"react-geolocated\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Map from \"./Map\";\r\nimport MblNavbar from \"../Common/MblNavbar\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport * as geolib from \"geolib\";\r\nimport * as actionCreators from \"../../Store/actions/index\";\r\nimport { baseUrl } from \"../../config\";\r\nimport {fetchWithTimeout} from '../../api';\r\n\r\nfunction AddAddressFromMap(props) {\r\n  const [showMap, setShowMap] = useState(true);\r\n  const mapData = props.restaurant.curRestaurant;\r\n  const mapPoints = props.config.curBranch.points;\r\n  const history = useHistory();\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [isServicable, setIsServicable] = useState(true);\r\n  const [cords, setCords] = useState({\r\n    lat: mapData.lat,\r\n    lng: mapData.lon,\r\n  });\r\n  const emptyLoginData = {\r\n    id: \"\",\r\n    name: props.config.authData.user.name,\r\n    type: 1,\r\n    new: true,\r\n    phone: props.config.authData.phone,\r\n    flat: \"\",\r\n    street: \"\",\r\n    // address: \"\",\r\n    area: \"\",\r\n    city: \"\",\r\n    lat: mapData.lat,\r\n    lng: mapData.long,\r\n  };\r\n  const handleCloseMap = () => {\r\n    if (isServicable) {\r\n      setShowMap(false);\r\n    } else {\r\n      setError(\"We can't deliver to your location.\");\r\n      setShowToast(true);\r\n    }\r\n  };\r\n  const [loginData, setLoginData] = useState(emptyLoginData);\r\n  useEffect(() => {\r\n    setCords({\r\n      lat: mapData.lat,\r\n      lng: mapData.lon,\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  const calculateService = (lat, lon) => {\r\n    const pointsPolygon = [];\r\n    mapPoints.map((point) =>\r\n      pointsPolygon.push({ latitude: point[1], longitude: point[0] })\r\n    );\r\n    const isInPolygon = geolib.isPointInPolygon(\r\n      { latitude: lat, longitude: lon },\r\n      pointsPolygon\r\n    );\r\n    setIsServicable(isInPolygon);\r\n  };\r\n  const validateForm = () => {\r\n    return true;\r\n  };\r\n  const handleSubmit = (e) => {\r\n    if (isServicable) {\r\n      e.preventDefault();\r\n      if (validateForm()) {\r\n        saveAddress()\r\n      }\r\n    } else {\r\n      e.preventDefault();\r\n      setError(\"We can't deliver to your location.\");\r\n      setShowToast(true);\r\n    }\r\n  };\r\n  const saveAddress = async () => {\r\n    const apiUrl = baseUrl + \"add/address\";\r\n    const data = {\r\n      flat: loginData.flat,\r\n      area: loginData.area,\r\n      city: loginData.city,\r\n      lat: loginData.lat,\r\n      lon: loginData.lon,\r\n      type: loginData.type\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\",\r\n        rKey: props.config.authData.rKey,\r\n        dKey: props.config.authData.dKey,\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n\r\n    const res = await (await fetchWithTimeout(apiUrl, options)).json();\r\n\r\n    if (res && res.status === 1) {\r\n      setError(res.msg);\r\n      setShowToast(true);\r\n      props.setAddressList(res.address);\r\n      history.goBack();\r\n      return;\r\n    }\r\n    if (res) {\r\n      setError(res.msg);\r\n      setShowToast(true);\r\n      return;\r\n    }\r\n  }\r\n\r\n  const handleAddressFromMap = (data) => {\r\n    setLoginData({\r\n      ...loginData,\r\n      area: data.address,\r\n      // street: data.area,\r\n      city: data.area,\r\n      lat: data.mapPosition.lat,\r\n      lon: data.mapPosition.lng,\r\n    });\r\n    calculateService(data.mapPosition.lat, data.mapPosition.lng);\r\n  };\r\n  const handleBack = () => {\r\n    history.push(\"/checkout\");\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginData({ ...loginData, [name]: value });\r\n  };\r\n\r\n  const errorToast = (\r\n    <Toast\r\n      onClose={() => setShowToast(false)}\r\n      show={showToast}\r\n      delay={2000}\r\n      autohide\r\n      style={{\r\n        position: \"fixed\",\r\n        bottom: \"20vh\",\r\n        zIndex: \"999\",\r\n        textAlign: \"center\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n      }}\r\n    >\r\n      <Toast.Body\r\n        style={{\r\n          backgroundColor: \"#2f4f4f\",\r\n          color: \"white\",\r\n          borderBottom: \"none\",\r\n          textAlign: \"center\",\r\n          padding: \"0.2rem 0.8rem\",\r\n        }}\r\n      >\r\n        {<strong className=\"mr-auto\">{error}</strong>}\r\n      </Toast.Body>\r\n    </Toast>\r\n  );\r\n  const addressForm = (\r\n    <>\r\n      <MblNavbar heading=\"Add Address\" back={() => history.goBack()} />\r\n      {errorToast}\r\n      <div\r\n        className=\"all-product-grid container\"\r\n        style={{ padding: \"2px 15px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"8vh\" }}>\r\n          <div className=\"col-lg-12 container checout-address-step\">\r\n            <form className=\"\" onSubmit={handleSubmit}>\r\n              <div className=\"address-fieldset\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-6 col-md-12\">\r\n                    <div className=\"form-group\">\r\n                      <div className=\"product-radio\">\r\n                        <ul className=\"product-now\">\r\n                          <li>\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"address1\"\r\n                              id=\"ad1\"\r\n                              checked={loginData.type === 1}\r\n                              onChange={() =>\r\n                                setLoginData({ ...loginData, type: 1 })\r\n                              }\r\n                            />\r\n                            <label htmlFor=\"ad1\">Home</label>\r\n                          </li>\r\n                          <li>\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"address2\"\r\n                              id=\"ad2\"\r\n                              checked={loginData.type === 2}\r\n                              onChange={() =>\r\n                                setLoginData({ ...loginData, type: 2 })\r\n                              }\r\n                            />\r\n                            <label htmlFor=\"ad2\">Office</label>\r\n                          </li>\r\n                          <li>\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"address3\"\r\n                              id=\"ad3\"\r\n                              checked={loginData.type === 3}\r\n                              onChange={() =>\r\n                                setLoginData({ ...loginData, type: 3 })\r\n                              }\r\n                            />\r\n                            <label htmlFor=\"ad3\">Other</label>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {loginData.area && (\r\n                    <div className=\"address-item\">\r\n                      <div className=\"address-dt-all\">\r\n                        <p\r\n                          style={{\r\n                            display: \"flex\",\r\n                            fontSize: \"14px\",\r\n                            fontWeight: \"bold\",\r\n                            justifyContent: \"space-between\",\r\n                          }}\r\n                        >\r\n                          Selected Address\r\n                          <div\r\n                            className=\"d-flex\"\r\n                            onClick={() => setShowMap(true)}\r\n                          >\r\n                            Edit\r\n                            <i className=\"uil uil-edit\"></i>\r\n                          </div>\r\n                        </p>\r\n                        <p>{loginData.area}</p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div\r\n                    className=\"col-lg-6 col-md-12\"\r\n                    style={{ marginBottom: \"20px\" }}\r\n                  >\r\n                    <div className=\"form-group\">\r\n                      <label className=\"control-label\">\r\n                        Flat / House / Office No.*\r\n                      </label>\r\n                      <input\r\n                        id=\"flat\"\r\n                        name=\"flat\"\r\n                        type=\"text\"\r\n                        placeholder=\"Flat No.\"\r\n                        value={loginData.flat}\r\n                        onChange={handleChange}\r\n                        className=\"form-control input-md\"\r\n                        required\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-12 col-md-12\">\r\n                    <div className=\"form-group\">\r\n                      <div className=\"address-btns\">\r\n                        <div className=\"\">\r\n                          <button\r\n                            type=\"submit\"\r\n                            className=\"save-btn14 hover-btn\"\r\n                          >\r\n                            Add Address\r\n                          </button>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                          <button\r\n                            onClick={handleBack}\r\n                            className=\"next-btn16 hover-btn float-right\"\r\n                          >\r\n                            Back\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n  const mapView = (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        overflow: \"hidden\",\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      {errorToast}\r\n      <Map\r\n        google={props.google}\r\n        center={cords}\r\n        height=\"100%\"\r\n        zoom={15}\r\n        handleAddressFromMap={handleAddressFromMap}\r\n        handleCloseMap={handleCloseMap}\r\n        isServicable={isServicable}\r\n        setError={setError}\r\n        setShowToast={setShowToast}\r\n      />\r\n    </div>\r\n  );\r\n  return showMap ? mapView : addressForm;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    address: state.address,\r\n    config: state.config,\r\n    cart: state.cart,\r\n    restaurant: state.restaurant,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNewAddress: (payload) => dispatch(actionCreators.addNewAddress(payload)),\r\n    setAddressList: (payload) =>\r\n      dispatch(actionCreators.setAddressList(payload))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  geolocated({\r\n    positionOptions: {\r\n      enableHighAccuracy: true,\r\n    },\r\n    userDecisionTimeout: 5000,\r\n  })(AddAddressFromMap)\r\n);\r\n"],"sourceRoot":""}